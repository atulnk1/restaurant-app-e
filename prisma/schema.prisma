// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model restaurant {
  id Int @id @default(autoincrement())
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  restaurant_name String @db.VarChar(255)
  restaurant_description String @db.Text @default("none")
  restaurant_location_address String @db.VarChar(255)
  restaurant_location_city String @db.VarChar(255)
  restaurant_location_country String @db.VarChar(255)
  restaurant_location_lat Decimal @db.Decimal(8,6)
  restaurant_location_long Decimal @db.Decimal(9,6)
  restaurant_image String[] @db.Text
  restaurant_opening_hours String @db.VarChar(255)
  restaurant_facilities String[]
  restaurant_cuisine String[]
  restaurant_cuisine_search String @default("none")
  restaurant_cost Int
  restaurant_start_date DateTime
  restaurant_end_date DateTime
  restaurant_start_time String
  restaurant_end_time String
  restaurant_average_seating_time Int
  restaurant_max_table_one Int
  restaurant_max_table_two Int
  restaurant_max_table_three Int
  restaurant_max_table_four Int
  restaurant_max_table_five Int
  restauarant_featured Boolean @default(false)
  restaurant_status String @default("open")
  reservation reservations[]
  availabilityDateTime availabilityDateTime[]
}

model diner_user {
  id String @id @default(uuid())
  email String @unique
  first_name String 
  last_name String
  password String @db.VarChar(255)
  reservations reservations[]
}

model reservations {
  id String @id @default(uuid())
  party_size Int
  display_date String
  system_date DateTime
  time String
  reservation_status String @default("booked")
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  diner diner_user @relation(fields: [diner_id], references: [id])
  diner_id String
  restaurant restaurant @relation(fields: [restaurant_id], references: [id])
  restaurant_id Int
}

model availabilityDateTime {
  id Int @id @default(autoincrement())
  date_time String
  available_table_one Int
  available_table_two Int
  available_table_three Int
  available_table_four Int
  available_table_five Int
  restaurant restaurant @relation(fields: [restaurant_id], references: [id])
  restaurant_id Int
}

model restaurant_user {
  id String @id @default(uuid())
  email String @unique
  password String @db.VarChar(255)
}